name: Docker CI

on:
  push:
    branches: [ master ]

jobs:

  build-push-images:
    name: Budowa obrazów dla różnych architektur
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Qemu
      uses: docker/setup-qemu-action@v1
      
    - name: Buildx set-up
      id: buildx
      uses: docker/setup-buildx-action@v1
      
   # - name: Login to DockerHub
   #   uses: docker/login-action@v1
   #   with: 
   #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
   #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        
    - name: Login to GitHub Container Registry
      run: echo "${{ secrets.GHCR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
        
   # - name: Build image
   #   uses: docker/build-push-action@v2
   #   with: 
   #     context: .
   #     file: ./Dockerfile
   #     platforms: linux/arm/v7,linux/arm64/v8,linux/amd64
   #     push: true
   #     tags: michalnurz/labox:gittchdocker
   #     cache-from: type=local,src=/tmp/.buildx-cache
   #     cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
    - name: Push image to ghcr
      run: |
        IMAGE_ID=$(echo ghcr.io/${{ github.repository }} | tr '[A-Z]' '[a-z]')
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        # when the branch is master, replace master with latest
        [ "$VERSION" == "master" ] && VERSION=latest
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        # Build and Publish container image
        docker buildx build --push \
        --tag $IMAGE_ID:$VERSION \
        --platform linux/arm/v7,linux/arm64/v8,linux/amd64 .
        
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    
    - name: Image digest
      run: echo $ {{ steps.docker_build.outputs.digest }}
        
